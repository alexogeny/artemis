{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mere is an asynchronous, multi-tenant web framework that combines Python ergonomics with Rust-backed performance primitives. It provides a batteries-included platform for building tenant-isolated SaaS applications with declarative routing, structured observability, and a fully async runtime. Key capabilities \u00b6 Tenant-aware runtime \u2013 every request flows through an explicit TenantContext so custom logic and storage always resolve the correct tenant boundary. Declarative routing \u2013 the @route , @get , and @post decorators expose typed request/response surfaces that stay in sync with generated OpenAPI contracts and the TypeScript client. Authentication orchestration \u2013 plug-and-play passkey, password, MFA, and SSO flows managed through the quickstart utilities or your own domain services. Observability hooks \u2013 consistent tracing, metrics, and audit logging surfaces ready for the platform of your choice. First-class async \u2013 every subsystem (database, background jobs, WebSockets, streaming events) is built on an async execution model so work can scale horizontally across tenants. The remainder of this documentation explains how to get started, wire the framework into your stack, and operate a Mere deployment in production.","title":"Home"},{"location":"#key-capabilities","text":"Tenant-aware runtime \u2013 every request flows through an explicit TenantContext so custom logic and storage always resolve the correct tenant boundary. Declarative routing \u2013 the @route , @get , and @post decorators expose typed request/response surfaces that stay in sync with generated OpenAPI contracts and the TypeScript client. Authentication orchestration \u2013 plug-and-play passkey, password, MFA, and SSO flows managed through the quickstart utilities or your own domain services. Observability hooks \u2013 consistent tracing, metrics, and audit logging surfaces ready for the platform of your choice. First-class async \u2013 every subsystem (database, background jobs, WebSockets, streaming events) is built on an async execution model so work can scale horizontally across tenants. The remainder of this documentation explains how to get started, wire the framework into your stack, and operate a Mere deployment in production.","title":"Key capabilities"},{"location":"getting-started/","text":"This guide walks through installing Mere, bootstrapping a tenant-aware application, and running the quality gates that keep the codebase healthy. Installation \u00b6 Mere ships on PyPI as a standard Python package. The project uses uv to manage dependencies and virtual environments, so the quickest way to get a development environment is: uv sync The sync command installs the framework along with development tooling such as ruff , ty , and pytest . It also pulls in MkDocs and the shadcn theme so documentation can be previewed locally. Creating your first app \u00b6 The framework exposes two entry points: MereApp encapsulates the ASGI application while Mere provides a declarative constructor that accepts raw mappings. A minimal tenant-aware service looks like this: from mere import AppConfig , MereApp from mere.routing import get app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" , \"beta\" ))) @get ( \"/hello\" ) async def hello () -> dict [ str , str ]: return { \"message\" : \"Hello from Mere\" } Running the app requires an ASGI server such as granian . During development you can launch it with: uv run granian --interface rsgi --workers 1 mere.server:create_app The server will resolve requests for https://acme.demo.local.test and https://beta.demo.local.test by mapping each hostname to the corresponding tenant context. Quality checks \u00b6 Before committing changes, run the built-in quality command: uv run mere The CLI iterates through ruff check , ty check , and pytest , ensuring formatting, type-safety, and full async test coverage. Documentation preview \u00b6 Docs live in the docs/ directory and are rendered with MkDocs using the shadcn theme. Start a local preview server with: uv run mkdocs serve MkDocs watches the source files and rebuilds the site automatically as Markdown changes. The site is ready to be published to GitHub Pages using uv run mkdocs gh-deploy , which builds the documentation and pushes the result to the gh-pages branch.","title":"Getting started"},{"location":"getting-started/#installation","text":"Mere ships on PyPI as a standard Python package. The project uses uv to manage dependencies and virtual environments, so the quickest way to get a development environment is: uv sync The sync command installs the framework along with development tooling such as ruff , ty , and pytest . It also pulls in MkDocs and the shadcn theme so documentation can be previewed locally.","title":"Installation"},{"location":"getting-started/#creating-your-first-app","text":"The framework exposes two entry points: MereApp encapsulates the ASGI application while Mere provides a declarative constructor that accepts raw mappings. A minimal tenant-aware service looks like this: from mere import AppConfig , MereApp from mere.routing import get app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" , \"beta\" ))) @get ( \"/hello\" ) async def hello () -> dict [ str , str ]: return { \"message\" : \"Hello from Mere\" } Running the app requires an ASGI server such as granian . During development you can launch it with: uv run granian --interface rsgi --workers 1 mere.server:create_app The server will resolve requests for https://acme.demo.local.test and https://beta.demo.local.test by mapping each hostname to the corresponding tenant context.","title":"Creating your first app"},{"location":"getting-started/#quality-checks","text":"Before committing changes, run the built-in quality command: uv run mere The CLI iterates through ruff check , ty check , and pytest , ensuring formatting, type-safety, and full async test coverage.","title":"Quality checks"},{"location":"getting-started/#documentation-preview","text":"Docs live in the docs/ directory and are rendered with MkDocs using the shadcn theme. Start a local preview server with: uv run mkdocs serve MkDocs watches the source files and rebuilds the site automatically as Markdown changes. The site is ready to be published to GitHub Pages using uv run mkdocs gh-deploy , which builds the documentation and pushes the result to the gh-pages branch.","title":"Documentation preview"},{"location":"architecture/overview/","text":"Mere is organized as a layered system that embraces async-first boundaries and explicit tenant context propagation. Runtime layers \u00b6 Entry point ( MereApp ) \u2014 wraps the ASGI interfaces for HTTP and WebSocket scopes. Requests flow through middleware, dependency injection, and the routing table to reach handlers defined with the decorator API. Tenant resolution \u2014 the TenantResolver inspects the host header, matches it against the configured tenants, and injects a TenantContext into downstream calls. All persistence and background tasks receive the context explicitly. Domain services \u2014 authentication, chatops, audit, observability, and custom services consume the runtime metadata and expose typed operations that can be orchestrated per-tenant. Infrastructure \u2014 the database, ORM, event streams, and serialization layers share reusable utilities built on msgspec, rloop, and other Rust-backed primitives. Key modules \u00b6 mere.application implements routing, request dispatch, dependency injection, and background task orchestration. mere.config defines the AppConfig struct that declaratively wires tenancy, observability, persistence, and external integrations. mere.tenancy contains the tenant resolution algorithms, including helpers for admin vs tenant scope. mere.database and mere.orm manage tenant-aware database access with schema separation and typed models. mere.quickstart bootstraps authentication, tenancy data, and sample routes so new deployments can be exercised immediately. Each module is designed to run in-thread, in a separate process, or on a remote worker by serializing messages with msgspec. This keeps the runtime horizontally scalable and safe under concurrent load.","title":"Overview"},{"location":"architecture/overview/#runtime-layers","text":"Entry point ( MereApp ) \u2014 wraps the ASGI interfaces for HTTP and WebSocket scopes. Requests flow through middleware, dependency injection, and the routing table to reach handlers defined with the decorator API. Tenant resolution \u2014 the TenantResolver inspects the host header, matches it against the configured tenants, and injects a TenantContext into downstream calls. All persistence and background tasks receive the context explicitly. Domain services \u2014 authentication, chatops, audit, observability, and custom services consume the runtime metadata and expose typed operations that can be orchestrated per-tenant. Infrastructure \u2014 the database, ORM, event streams, and serialization layers share reusable utilities built on msgspec, rloop, and other Rust-backed primitives.","title":"Runtime layers"},{"location":"architecture/overview/#key-modules","text":"mere.application implements routing, request dispatch, dependency injection, and background task orchestration. mere.config defines the AppConfig struct that declaratively wires tenancy, observability, persistence, and external integrations. mere.tenancy contains the tenant resolution algorithms, including helpers for admin vs tenant scope. mere.database and mere.orm manage tenant-aware database access with schema separation and typed models. mere.quickstart bootstraps authentication, tenancy data, and sample routes so new deployments can be exercised immediately. Each module is designed to run in-thread, in a separate process, or on a remote worker by serializing messages with msgspec. This keeps the runtime horizontally scalable and safe under concurrent load.","title":"Key modules"},{"location":"guides/database/","text":"Mere provides a tenant-aware database layer coupled with a declarative ORM. Models define schema metadata and scopes (admin vs tenant) to keep data separated safely. Connecting to Postgres \u00b6 from mere import AppConfig , MereApp from mere.database import Database , DatabaseConfig config = AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,), database = Database ( DatabaseConfig . from_dsn ( \"postgresql://user:pass@localhost/db\" )), ) app = MereApp ( config ) The database helper manages connection pools per-tenant and exposes async helpers for executing SQL with msgspec-typed results. Defining models \u00b6 from mere.orm import Model , ModelScope , model @model ( scope = ModelScope . TENANT , tablename = \"widgets\" ) class Widget ( Model ): id : int name : str Models register with the global registry so migrations and the ORM can discover them automatically. Tenant-scoped models are automatically namespaced by tenant when issuing queries. Running migrations \u00b6 Invoke the CLI to generate and apply migrations: uv run mere make-migration add_widgets --directory = migrations uv run mere migrate --module = migrations generate_schema_migrations introspects the registered models to create idempotent migrations for both tenant and admin schemas.","title":"Database and ORM"},{"location":"guides/database/#connecting-to-postgres","text":"from mere import AppConfig , MereApp from mere.database import Database , DatabaseConfig config = AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,), database = Database ( DatabaseConfig . from_dsn ( \"postgresql://user:pass@localhost/db\" )), ) app = MereApp ( config ) The database helper manages connection pools per-tenant and exposes async helpers for executing SQL with msgspec-typed results.","title":"Connecting to Postgres"},{"location":"guides/database/#defining-models","text":"from mere.orm import Model , ModelScope , model @model ( scope = ModelScope . TENANT , tablename = \"widgets\" ) class Widget ( Model ): id : int name : str Models register with the global registry so migrations and the ORM can discover them automatically. Tenant-scoped models are automatically namespaced by tenant when issuing queries.","title":"Defining models"},{"location":"guides/database/#running-migrations","text":"Invoke the CLI to generate and apply migrations: uv run mere make-migration add_widgets --directory = migrations uv run mere migrate --module = migrations generate_schema_migrations introspects the registered models to create idempotent migrations for both tenant and admin schemas.","title":"Running migrations"},{"location":"guides/observability/","text":"Mere ships with structured observability hooks that expose request traces, metrics, and audit records. Configuring observability \u00b6 Provide ObservabilityConfig when constructing the app: from mere import AppConfig , MereApp from mere.observability import Observability , ObservabilityConfig observability = Observability ( config = ObservabilityConfig ( service_name = \"mere-demo\" )) app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,))) app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,), observability = observability , ) ) The observability hooks expose async context managers for span creation, structured logging, and emitting metrics. The default implementation writes JSON events to stdout, but you can inject custom providers to integrate with OpenTelemetry, Honeycomb, or any other tracing system. Audit trails \u00b6 Audit trails capture sensitive operations in admin and tenant scopes. Use AuditTrail to wrap critical workflows: from mere.audit import AuditTrail async with AuditTrail . current () . record ( action = \"tenant.reset-password\" , tenant = tenant . tenant ): ... The audit subsystem includes helpers for forwarding events to chatops integrations and long-term storage systems.","title":"Observability"},{"location":"guides/observability/#configuring-observability","text":"Provide ObservabilityConfig when constructing the app: from mere import AppConfig , MereApp from mere.observability import Observability , ObservabilityConfig observability = Observability ( config = ObservabilityConfig ( service_name = \"mere-demo\" )) app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,))) app = MereApp ( AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" ,), observability = observability , ) ) The observability hooks expose async context managers for span creation, structured logging, and emitting metrics. The default implementation writes JSON events to stdout, but you can inject custom providers to integrate with OpenTelemetry, Honeycomb, or any other tracing system.","title":"Configuring observability"},{"location":"guides/observability/#audit-trails","text":"Audit trails capture sensitive operations in admin and tenant scopes. Use AuditTrail to wrap critical workflows: from mere.audit import AuditTrail async with AuditTrail . current () . record ( action = \"tenant.reset-password\" , tenant = tenant . tenant ): ... The audit subsystem includes helpers for forwarding events to chatops integrations and long-term storage systems.","title":"Audit trails"},{"location":"guides/quickstart/","text":"The attach_quickstart function seeds a ready-to-use login experience, sample tenants, and supporting routes that live under /__mere . It is ideal for demos, smoke tests, and early development stages. Enabling the quickstart \u00b6 from mere import AppConfig , MereApp from mere.quickstart import attach_quickstart config = AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" , \"beta\" )) app = MereApp ( config ) attach_quickstart ( app ) Calling attach_quickstart registers routes, configures tenancy metadata, and loads the embedded front-end assets. The helper is idempotent\u2014calling it multiple times inspects the existing state and only applies missing pieces. Scaffolding a production project \u00b6 The mere CLI can materialise a complete project\u2014including tenancy-aware quickstart wiring, infrastructure definitions, and local developer tooling\u2014in a single command: uv run mere new my-service \\ --git-host github \\ --iac terraform \\ --backbone aws The generator creates: app/ with a ready-to-serve MereApp that calls attach_quickstart and exposes a /health probe. app/runtime.py exposing get_database() / get_tenants() so migrations and test data snapshots work out of the box. CI workflows tailored to GitHub or GitLab with the full ruff / ty / pytest quality bar. IaC skeletons for Terraform/OpenTofu, Kubernetes, or CloudFormation preconfigured for AWS, Google Cloud, Azure, DigitalOcean, or Cloudflare. ops/docker-compose.yml to launch PostgreSQL 16 and Keycloak 23 locally, matching the quickstart authentication flows. Use --skip-dev-stack to omit the Docker Compose files if your team relies on an alternative local stack, and swap --iac / --backbone / --git-host to match your production environment. Consult uv run mere new --help whenever you need a refresher on the supported combinations. Authentication flows \u00b6 Acme tenant \u2013 configured for SAML SSO with Okta metadata. Use it to validate SSO login logic. Beta tenant \u2013 demonstrates passkeys with password fallback and TOTP-based MFA. Admin realm \u2013 enforces password + MFA to protect administrative APIs. Each flow uses the same orchestration as production deployments so you can test the complete session lifecycle end to end. Database bootstrap \u00b6 When a database connection is supplied through AppConfig , the quickstart helper provisions schemas and seed data via quickstart_migrations() and QuickstartSeeder . The helper keeps the TenantResolver.allowed_tenants list in sync with the database, so new tenants appear as soon as they are registered.","title":"Quickstart helper"},{"location":"guides/quickstart/#enabling-the-quickstart","text":"from mere import AppConfig , MereApp from mere.quickstart import attach_quickstart config = AppConfig ( site = \"demo\" , domain = \"local.test\" , allowed_tenants = ( \"acme\" , \"beta\" )) app = MereApp ( config ) attach_quickstart ( app ) Calling attach_quickstart registers routes, configures tenancy metadata, and loads the embedded front-end assets. The helper is idempotent\u2014calling it multiple times inspects the existing state and only applies missing pieces.","title":"Enabling the quickstart"},{"location":"guides/quickstart/#scaffolding-a-production-project","text":"The mere CLI can materialise a complete project\u2014including tenancy-aware quickstart wiring, infrastructure definitions, and local developer tooling\u2014in a single command: uv run mere new my-service \\ --git-host github \\ --iac terraform \\ --backbone aws The generator creates: app/ with a ready-to-serve MereApp that calls attach_quickstart and exposes a /health probe. app/runtime.py exposing get_database() / get_tenants() so migrations and test data snapshots work out of the box. CI workflows tailored to GitHub or GitLab with the full ruff / ty / pytest quality bar. IaC skeletons for Terraform/OpenTofu, Kubernetes, or CloudFormation preconfigured for AWS, Google Cloud, Azure, DigitalOcean, or Cloudflare. ops/docker-compose.yml to launch PostgreSQL 16 and Keycloak 23 locally, matching the quickstart authentication flows. Use --skip-dev-stack to omit the Docker Compose files if your team relies on an alternative local stack, and swap --iac / --backbone / --git-host to match your production environment. Consult uv run mere new --help whenever you need a refresher on the supported combinations.","title":"Scaffolding a production project"},{"location":"guides/quickstart/#authentication-flows","text":"Acme tenant \u2013 configured for SAML SSO with Okta metadata. Use it to validate SSO login logic. Beta tenant \u2013 demonstrates passkeys with password fallback and TOTP-based MFA. Admin realm \u2013 enforces password + MFA to protect administrative APIs. Each flow uses the same orchestration as production deployments so you can test the complete session lifecycle end to end.","title":"Authentication flows"},{"location":"guides/quickstart/#database-bootstrap","text":"When a database connection is supplied through AppConfig , the quickstart helper provisions schemas and seed data via quickstart_migrations() and QuickstartSeeder . The helper keeps the TenantResolver.allowed_tenants list in sync with the database, so new tenants appear as soon as they are registered.","title":"Database bootstrap"},{"location":"guides/tenancy/","text":"Mere enforces tenant isolation by threading an explicit TenantContext through every boundary. The context captures the tenant slug, scope (tenant vs admin), and additional metadata that downstream services can use. Host-based resolution \u00b6 TenantResolver maps hostnames to tenants. Given a site demo and domain local.test , a request to https://acme.demo.local.test resolves to the acme tenant while https://admin.demo.local.test yields the admin scope. The resolver rejects unknown hosts to prevent cross-tenant data leaks. Using tenant context \u00b6 Handlers access the active tenant through dependency injection: from mere.routing import get from mere.tenancy import TenantContext @get ( \"/me\" ) async def my_profile ( tenant : TenantContext ) -> dict [ str , str ]: return { \"tenant\" : tenant . tenant } Database utilities such as Database and ORM expect the context when issuing queries so tables are segregated by tenant. Background jobs and events should propagate the context explicitly to keep work bounded to the original tenant.","title":"Tenant routing"},{"location":"guides/tenancy/#host-based-resolution","text":"TenantResolver maps hostnames to tenants. Given a site demo and domain local.test , a request to https://acme.demo.local.test resolves to the acme tenant while https://admin.demo.local.test yields the admin scope. The resolver rejects unknown hosts to prevent cross-tenant data leaks.","title":"Host-based resolution"},{"location":"guides/tenancy/#using-tenant-context","text":"Handlers access the active tenant through dependency injection: from mere.routing import get from mere.tenancy import TenantContext @get ( \"/me\" ) async def my_profile ( tenant : TenantContext ) -> dict [ str , str ]: return { \"tenant\" : tenant . tenant } Database utilities such as Database and ORM expect the context when issuing queries so tables are segregated by tenant. Background jobs and events should propagate the context explicitly to keep work bounded to the original tenant.","title":"Using tenant context"},{"location":"ops/publishing/","text":"Mere's documentation is built with MkDocs using the shadcn theme. The site can be deployed to GitHub Pages directly from the repository. Prerequisites \u00b6 Ensure development dependencies are installed: uv sync Build locally \u00b6 Generate a production build to validate styling and links: uv run mkdocs build --strict The output lives in site/ and matches what GitHub Pages will host. Deploy to GitHub Pages \u00b6 Use the MkDocs deployment helper: uv run mkdocs gh-deploy --force The command builds the site and pushes it to the gh-pages branch. Configure the repository's GitHub Pages settings to serve content from that branch. Subsequent deployments reuse the same command. The automation pipeline also runs this command after every push to main , ensuring that docs in GitHub Pages stay in sync with the default branch.","title":"Publishing docs"},{"location":"ops/publishing/#prerequisites","text":"Ensure development dependencies are installed: uv sync","title":"Prerequisites"},{"location":"ops/publishing/#build-locally","text":"Generate a production build to validate styling and links: uv run mkdocs build --strict The output lives in site/ and matches what GitHub Pages will host.","title":"Build locally"},{"location":"ops/publishing/#deploy-to-github-pages","text":"Use the MkDocs deployment helper: uv run mkdocs gh-deploy --force The command builds the site and pushes it to the gh-pages branch. Configure the repository's GitHub Pages settings to serve content from that branch. Subsequent deployments reuse the same command. The automation pipeline also runs this command after every push to main , ensuring that docs in GitHub Pages stay in sync with the default branch.","title":"Deploy to GitHub Pages"},{"location":"ops/security/","text":"Mere ships with fixture data for the developer quickstart (sample tenants, passkeys, and passwords). Those values are intentionally synthetic\u2014they are not live credentials\u2014and exist only to demonstrate the framework's multi-tenant flows. To keep production environments safe: Provide real quickstart identities through MERE_QUICKSTART_AUTH or MERE_QUICKSTART_AUTH_FILE . Both knobs are documented in .env.example so developers can mount secrets from their secret manager or export inline JSON for temporary sandboxes. Keep quickstart payloads and other credentials outside of source control. Use .env files that are ignored by Git or secret managers that project the values at runtime. Rotate any temporary credentials used during demos or QA and avoid reusing them across environments. Audit new code for accidentally committed secrets. (A repository-wide search confirms that only the fixture values mentioned above are present.) Follow these practices before merging features or publishing the documentation site.","title":"Secret hygiene"},{"location":"reference/api/","text":"Central application object. Source code in src/mere/application.pyclass MereApp : \"\"\"Central application object.\"\"\" def __init__ ( self , config : AppConfig | None = None , * , dependency_provider : DependencyProvider | None = None , executor : TaskExecutor | None = None , tenant_resolver : TenantResolver | None = None , database : Database | None = None , orm : ORM | None = None , chatops : ChatOpsService | None = None , observability : Observability | None = None , ) -> None : self . config = config or AppConfig () self . router = Router () self . dependencies = dependency_provider or DependencyProvider () self . executor = executor or TaskExecutor ( self . config . execution ) self . tenant_resolver = tenant_resolver or TenantResolver ( site = self . config . site , domain = self . config . domain , admin_subdomain = self . config . admin_subdomain , marketing_tenant = self . config . marketing_tenant , allowed_tenants = self . config . allowed_tenants or None , ) self . database = database or ( Database ( self . config . database ) if self . config . database else None ) self . orm = orm or ( ORM ( self . database ) if self . database else None ) self . observability = observability or Observability ( self . config . observability ) self . chatops = chatops or ChatOpsService ( self . config . chatops , observability = self . observability ) self . chatops_commands = ChatOpsCommandRegistry () if self . database : existing_audit = self . orm and getattr ( self . orm , \"_audit_trail\" , None ) if existing_audit is not None : self . audit_trail = existing_audit else : self . audit_trail = AuditTrail ( self . database , registry = self . orm . registry if self . orm else None , ) if self . orm : self . orm . attach_audit_trail ( self . audit_trail ) else : self . audit_trail = None self . _middlewares : list [ MiddlewareCallable ] = [] self . add_middleware ( security_headers_middleware ) self . _startup_hooks : list [ Callable [[], Awaitable [ None ] | None ]] = [] self . _shutdown_hooks : list [ Callable [[], Awaitable [ None ] | None ]] = [] self . _named_routes : dict [ str , str ] = {} if self . database : self . dependencies . provide ( Database , lambda : self . database ) self . on_startup ( self . database . startup ) self . on_shutdown ( self . database . shutdown ) if self . orm : self . dependencies . provide ( ORM , lambda : self . orm ) if self . audit_trail : self . dependencies . provide ( AuditTrail , lambda : self . audit_trail ) self . dependencies . provide ( Observability , lambda : self . observability ) self . dependencies . provide ( ChatOpsService , lambda : self . chatops ) # ------------------------------------------------------------------ routing def route ( self , path : str , * , methods : Iterable [ str ], name : str | None = None , authorize : RouteGuard | Sequence [ RouteGuard ] | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: def decorator ( func : Callable [ ... , Awaitable [ Any ] | Any ]) -> Callable [ ... , Awaitable [ Any ] | Any ]: guards = self . _normalize_guards ( authorize ) self . router . add_route ( path , methods = tuple ( methods ), endpoint = func , name = name , guards = guards ) if name is not None : self . _named_routes [ name ] = path return func return decorator def get ( self , path : str , * , name : str | None = None , authorize : RouteGuard | Sequence [ RouteGuard ] | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: return self . route ( path , methods = ( \"GET\" ,), name = name , authorize = authorize ) def post ( self , path : str , * , name : str | None = None , authorize : RouteGuard | Sequence [ RouteGuard ] | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: return self . route ( path , methods = ( \"POST\" ,), name = name , authorize = authorize ) def sse ( self , path : str , * , name : str | None = None , authorize : RouteGuard | Sequence [ RouteGuard ] | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: return self . route ( path , methods = ( \"GET\" ,), name = name , authorize = authorize ) def websocket ( self , path : str , * , name : str | None = None , authorize : RouteGuard | Sequence [ RouteGuard ] | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: return self . route ( path , methods = ( \"WEBSOCKET\" ,), name = name , authorize = authorize ) def chatops_command ( self , command : ChatOpsSlashCommand , * , name : str | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: \"\"\"Register a ChatOps command handler bound to ``command``.\"\"\" def decorator ( func : Callable [ ... , Awaitable [ Any ] | Any ]) -> Callable [ ... , Awaitable [ Any ] | Any ]: binding = ChatOpsCommandBinding ( command = command , handler = func , name = name or command . name , ) self . chatops_commands . register ( binding ) return func return decorator def mount_static ( self , path : str , * , directory : str | os . PathLike [ str ], name : str | None = None , index_file : str | None = \"index.html\" , cache_control : str | None = \"public, max-age=3600\" , follow_symlinks : bool = False , content_types : Mapping [ str , str ] | None = None , ) -> None : \"\"\"Serve files rooted at ``directory`` under ``path``.\"\"\" normalized = path . strip () if not normalized : raise ValueError ( \"Static mount path cannot be empty\" ) if not normalized . startswith ( \"/\" ): normalized = \"/\" + normalized stripped = normalized . strip ( \"/\" ) if not stripped : raise ValueError ( \"Static mount path cannot be '/' or whitespace only\" ) mount_path = \"/\" + stripped server = StaticFiles ( directory = directory , executor = self . executor , index_file = index_file , follow_symlinks = follow_symlinks , cache_control = cache_control , content_types = content_types , ) async def _serve_root ( request : Request ) -> Response : return await server . serve ( \"\" , method = request . method , headers = request . headers ) async def _serve_path ( filepath : str , request : Request ) -> Response : return await server . serve ( filepath , method = request . method , headers = request . headers ) self . router . add_route ( mount_path , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_root , name = name ) self . router . add_route ( f \" { mount_path } / {{ filepath:path }} \" , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_path ) if name is not None : self . _named_routes [ name ] = mount_path def include ( self , * handlers : Callable [ ... , Awaitable [ Any ] | Any ]) -> None : self . router . include ( handlers ) def guard ( self , * guards : RouteGuard ) -> None : self . router . guard ( * guards ) def url_path_for ( self , name : str , / , ** params : Any ) -> str : template = self . _named_routes . get ( name ) if template is None : raise LookupError ( f \"Route { name !r} not found\" ) path = template for key , value in params . items (): path = path . replace ( f \" {{ { key } }} \" , str ( value )) return path # ------------------------------------------------------------------ middleware def add_middleware ( self , middleware : MiddlewareCallable ) -> None : if middleware is security_headers_middleware : if middleware not in self . _middlewares : self . _middlewares . append ( middleware ) return if self . _middlewares and self . _middlewares [ - 1 ] is security_headers_middleware : self . _middlewares . insert ( len ( self . _middlewares ) - 1 , middleware ) else : self . _middlewares . append ( middleware ) # ------------------------------------------------------------------ lifecycle def on_startup ( self , func : Callable [[], Awaitable [ None ] | None ]) -> Callable [[], Awaitable [ None ] | None ]: self . _startup_hooks . append ( func ) return func def on_shutdown ( self , func : Callable [[], Awaitable [ None ] | None ]) -> Callable [[], Awaitable [ None ] | None ]: self . _shutdown_hooks . append ( func ) return func async def startup ( self ) -> None : for hook in self . _startup_hooks : result = hook () if inspect . isawaitable ( result ): await result async def shutdown ( self ) -> None : for hook in self . _shutdown_hooks : result = hook () if inspect . isawaitable ( result ): await result await self . executor . shutdown () # ------------------------------------------------------------------ request handling async def dispatch ( self , method : str , path : str , * , host : str , query_string : str | None = None , headers : Mapping [ str , str ] | None = None , body : bytes | None = None , body_loader : Callable [[], Awaitable [ bytes ]] | None = None , ) -> Response : tenant = self . tenant_resolver . resolve ( host ) match = self . router . find ( method , path ) request = Request ( method = method , path = path , headers = headers or {}, tenant = tenant , path_params = match . params , query_string = query_string or \"\" , body = body if body is not None else None , body_loader = None if body is not None else body_loader , ) scope = self . dependencies . scope ( request ) async def endpoint_handler ( req : Request ) -> Response : return await self . _execute_route ( match . route , req , scope ) async def _execute_with_observability () -> Response : observation = self . observability . on_request_start ( request ) handler = apply_middleware ( self . _middlewares , endpoint_handler , observability = self . observability , request_context = observation , ) try : response = await handler ( request ) except HTTPError as exc : response = exception_to_response ( exc ) response = self . observability . on_request_success ( observation , response ) return response except Exception as exc : status = getattr ( exc , \"status\" , None ) if isinstance ( status , Status ): status_code = int ( status ) elif isinstance ( status , int ): status_code = status else : status_code = int ( Status . INTERNAL_SERVER_ERROR ) self . observability . on_request_error ( observation , exc , status_code = status_code ) raise else : response = self . observability . on_request_success ( observation , response ) return response def _actor_from_principal ( principal : CedarEntity | None ) -> AuditActor | None : if principal is None : return None return AuditActor ( id = principal . id , type = principal . type , attributes = dict ( principal . attributes or {}), ) if self . audit_trail : async with audit_context ( tenant = request . tenant , actor = _actor_from_principal ( request . principal )): return await _execute_with_observability () return await _execute_with_observability () async def _execute_route ( self , route , request : Request , scope ) -> Response : await self . _authorize_route ( route , request , scope ) call_args : Dict [ str , Any ] = {} event_streams : list [ EventStream ] = [] body_payload : Any | None = None for name , parameter in route . signature . parameters . items (): annotation = route . type_hints . get ( name , parameter . annotation ) if annotation is inspect . Signature . empty : annotation = str if name in route . param_names else Any if annotation is Request : call_args [ name ] = request continue if annotation is TenantContext : call_args [ name ] = request . tenant continue if annotation is EventStream : stream = EventStream ( executor = self . executor ) call_args [ name ] = stream event_streams . append ( stream ) continue if name in route . param_names : value = request . path_params [ name ] if annotation is str or annotation is Any : call_args [ name ] = value else : call_args [ name ] = convert_primitive ( value , annotation , source = name ) continue try : call_args [ name ] = await scope . get ( annotation ) except LookupError as exc : if _is_struct ( annotation ): if body_payload is None : body_payload = await request . json () call_args [ name ] = msgspec . convert ( body_payload or {}, type = annotation ) else : raise HTTPError ( Status . INTERNAL_SERVER_ERROR , { \"dependency\" : repr ( annotation ), \"detail\" : str ( exc )}, ) result = route . spec . endpoint ( ** call_args ) if inspect . isawaitable ( result ): result = await result if result is None and event_streams : if len ( event_streams ) > 1 : raise RuntimeError ( \"Multiple EventStream parameters require explicit return value\" ) result = event_streams [ 0 ] return _coerce_response ( result ) async def _execute_websocket_route ( self , route , websocket : WebSocket , scope ) -> None : call_args : Dict [ str , Any ] = {} for name , parameter in route . signature . parameters . items (): annotation = route . type_hints . get ( name , parameter . annotation ) if annotation is inspect . Signature . empty : annotation = str if name in route . param_names else Any if annotation is WebSocket : call_args [ name ] = websocket continue if annotation is Request : call_args [ name ] = websocket . request continue if annotation is TenantContext : call_args [ name ] = websocket . request . tenant continue if name in route . param_names : value = websocket . request . path_params [ name ] if annotation is str or annotation is Any : call_args [ name ] = value else : call_args [ name ] = convert_primitive ( value , annotation , source = name ) continue try : call_args [ name ] = await scope . get ( annotation ) except LookupError as exc : raise HTTPError ( Status . INTERNAL_SERVER_ERROR , { \"dependency\" : repr ( annotation ), \"detail\" : str ( exc )}, ) from exc result = route . spec . endpoint ( ** call_args ) if inspect . isawaitable ( result ): result = await result if result not in ( None , websocket ): raise RuntimeError ( \"WebSocket handlers must not return a value\" ) async def _authorize_route ( self , route , request : Request , scope ) -> None : if not route . guards : return principal = request . principal if principal is None : raise HTTPError ( Status . FORBIDDEN , { \"detail\" : \"authentication_required\" }) try : engine = await scope . get ( CedarEngine ) except LookupError as exc : # pragma: no cover - dependency misconfiguration raise HTTPError ( Status . INTERNAL_SERVER_ERROR , { \"detail\" : \"authorization engine missing\" }) from exc for guard in route . guards : if guard . principal_type not in ( \"*\" , principal . type ): raise HTTPError ( Status . FORBIDDEN , { \"detail\" : \"principal_not_allowed\" , \"required\" : guard . principal_type }, ) resource_id = guard . resolve_resource ( request ) resource = CedarEntity ( guard . resource_type , resource_id ) if resource_id else None context = guard . context ( request ) allowed = engine . check ( principal = principal , action = guard . action , resource = resource , context = context , ) if not allowed : raise HTTPError ( Status . FORBIDDEN , { \"action\" : guard . action , \"resource_type\" : guard . resource_type , \"resource_id\" : resource_id , \"detail\" : \"forbidden\" , }, ) @staticmethod def _normalize_guards ( authorize : RouteGuard | Sequence [ RouteGuard ] | None ) -> tuple [ RouteGuard , ... ]: if authorize is None : return () if isinstance ( authorize , RouteGuard ): return ( authorize ,) return tuple ( authorize ) # ------------------------------------------------------------------ interface adapters async def __call__ ( self , scope : Mapping [ str , Any ], receive : Callable [[], Awaitable [ Mapping [ str , Any ]]], send : Callable [[ Mapping [ str , Any ]], Awaitable [ None ]], ) -> None : scope_type = scope . get ( \"type\" ) if scope_type == \"http\" : await self . _handle_http ( scope , receive , send ) return if scope_type == \"websocket\" : await self . _handle_websocket ( scope , receive , send ) return raise RuntimeError ( \"MereApp only supports HTTP and WebSocket scopes\" ) async def _handle_http ( self , scope : Mapping [ str , Any ], receive : Callable [[], Awaitable [ Mapping [ str , Any ]]], send : Callable [[ Mapping [ str , Any ]], Awaitable [ None ]], ) -> None : headers , header_errors = self . _decode_scope_headers ( scope . get ( \"headers\" , [])) async def send_http_error ( error : HTTPError ) -> None : response = exception_to_response ( error ) await send ( { \"type\" : \"http.response.start\" , \"status\" : response . status , \"headers\" : [( name . encode ( \"latin-1\" ), value . encode ( \"latin-1\" )) for name , value in response . headers ], } ) await _send_response_body ( response , send ) if header_errors : error = HTTPError ( Status . BAD_REQUEST , { \"detail\" : \"invalid_header_encoding\" }) await send_http_error ( error ) return host = headers . get ( \"host\" ) if not host : error = HTTPError ( Status . BAD_REQUEST , { \"detail\" : \"missing_host_header\" }) await send_http_error ( error ) return max_body_bytes = self . config . max_request_body_bytes if max_body_bytes is not None : content_length = headers . get ( \"content-length\" ) if content_length : try : declared_length = int ( content_length ) except ValueError : error = HTTPError ( Status . BAD_REQUEST , { \"detail\" : \"invalid_content_length\" }) await send_http_error ( error ) return if declared_length < 0 : error = HTTPError ( Status . BAD_REQUEST , { \"detail\" : \"invalid_content_length\" }) await send_http_error ( error ) return if declared_length > max_body_bytes : error = HTTPError ( Status . PAYLOAD_TOO_LARGE , { \"detail\" : \"request_body_too_large\" }, ) await send_http_error ( error ) return body_state : dict [ str , Any ] = { \"buffer\" : bytearray (), \"cached\" : None , \"done\" : False , } query_string = self . _decode_query_string ( scope . get ( \"query_string\" )) async def load_body () -> bytes : cached = body_state [ \"cached\" ] if cached is not None : return cached while True : if body_state [ \"done\" ]: break message = await receive () message_type = message . get ( \"type\" ) if message_type == \"http.disconnect\" : body_state [ \"done\" ] = True continue if message_type != \"http.request\" : continue chunk = message . get ( \"body\" , b \"\" ) if chunk : chunk_bytes = bytes ( chunk ) if max_body_bytes is not None : projected = len ( body_state [ \"buffer\" ]) + len ( chunk_bytes ) if projected > max_body_bytes : body_state [ \"done\" ] = True body_state [ \"cached\" ] = None body_state [ \"buffer\" ] = bytearray () raise HTTPError ( Status . PAYLOAD_TOO_LARGE , { \"detail\" : \"request_body_too_large\" }, ) body_state [ \"buffer\" ] . extend ( chunk_bytes ) if not message . get ( \"more_body\" , False ): body_state [ \"done\" ] = True continue body_bytes = bytes ( body_state [ \"buffer\" ]) body_state [ \"cached\" ] = body_bytes body_state [ \"buffer\" ] = bytearray () return body_bytes try : response = await self . dispatch ( scope [ \"method\" ], scope [ \"path\" ], host = host , query_string = query_string , headers = headers , body_loader = load_body , ) except TenantResolutionError : error = HTTPError ( Status . BAD_REQUEST , { \"detail\" : \"invalid_host_header\" }) response = exception_to_response ( error ) await send ( { \"type\" : \"http.response.start\" , \"status\" : response . status , \"headers\" : [( k . encode ( \"latin-1\" ), v . encode ( \"latin-1\" )) for k , v in response . headers ], } ) await _send_response_body ( response , send ) async def _handle_websocket ( self , scope : Mapping [ str , Any ], receive : Callable [[], Awaitable [ Mapping [ str , Any ]]], send : Callable [[ Mapping [ str , Any ]], Awaitable [ None ]], ) -> None : headers , header_errors = self . _decode_scope_headers ( scope . get ( \"headers\" , [])) if header_errors : await send ({ \"type\" : \"websocket.close\" , \"code\" : 4400 }) return host = headers . get ( \"host\" ) if not host : await send ({ \"type\" : \"websocket.close\" , \"code\" : 4400 }) return if not self . _is_allowed_websocket_origin ( host , headers , scope ): await send ({ \"type\" : \"websocket.close\" , \"code\" : 4403 }) return try : tenant = self . tenant_resolver . resolve ( host ) except ( LookupError , TenantResolutionError ): await send ({ \"type\" : \"websocket.close\" , \"code\" : 4404 }) return path = scope . get ( \"path\" , \"\" ) try : match = self . router . find ( \"WEBSOCKET\" , path ) except LookupError : await send ({ \"type\" : \"websocket.close\" , \"code\" : 4404 }) return request = Request ( method = \"WEBSOCKET\" , path = path , headers = headers , tenant = tenant , path_params = match . params , query_string = self . _decode_query_string ( scope . get ( \"query_string\" )), ) scope_obj = self . dependencies . scope ( request ) websocket = WebSocket ( scope = scope , receive = receive , send = send , request = request , executor = self . executor , ) try : initial = await receive () except Exception : await websocket . close ( code = 1011 ) raise message_type = initial . get ( \"type\" ) if message_type == \"websocket.disconnect\" : return if message_type != \"websocket.connect\" : await websocket . close ( code = 4400 ) return try : await self . _authorize_route ( match . route , request , scope_obj ) except HTTPError as exc : await websocket . close ( code = _status_to_websocket_close ( exc . status )) return try : await self . _execute_websocket_route ( match . route , websocket , scope_obj ) except HTTPError as exc : await websocket . close ( code = _status_to_websocket_close ( exc . status )) except WebSocketDisconnect : pass except Exception : await websocket . close ( code = 1011 ) raise finally : await websocket . join_background () if not websocket . closed : await websocket . close () @staticmethod def _decode_scope_headers ( raw_headers : Iterable [ tuple [ HeaderPart , HeaderPart ]]) -> tuple [ dict [ str , str ], bool ]: decoded : dict [ str , str ] = {} had_errors = False for raw_name , raw_value in raw_headers : name , name_error = _decode_header_component ( raw_name ) value , value_error = _decode_header_component ( raw_value ) had_errors = had_errors or name_error or value_error if not name : continue decoded [ name . lower ()] = value return decoded , had_errors def _is_allowed_websocket_origin ( self , host : str , headers : Mapping [ str , str ], scope : Mapping [ str , Any ], ) -> bool : websocket_scheme = str ( scope . get ( \"scheme\" ) or \"\" ) . lower () allowed_origin_schemes = { \"http\" , \"https\" } if websocket_scheme in { \"ws\" , \"wss\" }: allowed_origin_schemes = { \"https\" } if websocket_scheme == \"wss\" else { \"http\" } origin_value = headers . get ( \"origin\" ) or headers . get ( \"sec-websocket-origin\" ) if origin_value is None : return False origin_scheme , origin_host , origin_port = _parse_origin_host ( origin_value , require_http_scheme = True ) if origin_scheme is None or origin_host is None : return False if origin_scheme not in allowed_origin_schemes : return False _ , expected_host , expected_port = _parse_origin_host ( host , require_http_scheme = False ) if expected_host is None : return False allowed_entries : list [ tuple [ str , int | None , set [ int ]]] = [] host_defaults = _default_ports_for_scheme ( websocket_scheme ) allowed_entries . append (( expected_host , expected_port , host_defaults )) if expected_port is None : for default_port in host_defaults : allowed_entries . append (( expected_host , default_port , host_defaults )) for entry in self . config . websocket_trusted_origins : entry_scheme , entry_host , entry_port = _parse_origin_host ( entry , require_http_scheme = False ) if entry_host is None : continue defaults = _default_ports_for_scheme ( entry_scheme ) allowed_entries . append (( entry_host , entry_port , defaults )) if entry_port is None : for default_port in defaults : allowed_entries . append (( entry_host , default_port , defaults )) origin_defaults = _default_ports_for_scheme ( origin_scheme ) for allowed_host , allowed_port , allowed_defaults in allowed_entries : if origin_host != allowed_host : continue if origin_port == allowed_port : return True if origin_port is None and allowed_port in origin_defaults : return True if allowed_port is None and origin_port in allowed_defaults : return True return False @staticmethod def _decode_query_string ( raw : object | None ) -> str : if raw is None : return \"\" if isinstance ( raw , str ): return raw if isinstance ( raw , ( bytes , bytearray , memoryview )): return bytes ( raw ) . decode ( \"latin-1\" ) return str ( raw ) # pragma: no cover - defensive fallback chatops_command ( command , * , name = None ) \u00b6 Register a ChatOps command handler bound to command . Source code in src/mere/application.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def chatops_command ( self , command : ChatOpsSlashCommand , * , name : str | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: \"\"\"Register a ChatOps command handler bound to ``command``.\"\"\" def decorator ( func : Callable [ ... , Awaitable [ Any ] | Any ]) -> Callable [ ... , Awaitable [ Any ] | Any ]: binding = ChatOpsCommandBinding ( command = command , handler = func , name = name or command . name , ) self . chatops_commands . register ( binding ) return func return decorator mount_static ( path , * , directory , name = None , index_file = 'index.html' , cache_control = 'public, max-age=3600' , follow_symlinks = False , content_types = None ) \u00b6 Serve files rooted at directory under path . Source code in src/mere/application.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def mount_static ( self , path : str , * , directory : str | os . PathLike [ str ], name : str | None = None , index_file : str | None = \"index.html\" , cache_control : str | None = \"public, max-age=3600\" , follow_symlinks : bool = False , content_types : Mapping [ str , str ] | None = None , ) -> None : \"\"\"Serve files rooted at ``directory`` under ``path``.\"\"\" normalized = path . strip () if not normalized : raise ValueError ( \"Static mount path cannot be empty\" ) if not normalized . startswith ( \"/\" ): normalized = \"/\" + normalized stripped = normalized . strip ( \"/\" ) if not stripped : raise ValueError ( \"Static mount path cannot be '/' or whitespace only\" ) mount_path = \"/\" + stripped server = StaticFiles ( directory = directory , executor = self . executor , index_file = index_file , follow_symlinks = follow_symlinks , cache_control = cache_control , content_types = content_types , ) async def _serve_root ( request : Request ) -> Response : return await server . serve ( \"\" , method = request . method , headers = request . headers ) async def _serve_path ( filepath : str , request : Request ) -> Response : return await server . serve ( filepath , method = request . method , headers = request . headers ) self . router . add_route ( mount_path , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_root , name = name ) self . router . add_route ( f \" { mount_path } / {{ filepath:path }} \" , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_path ) if name is not None : self . _named_routes [ name ] = mount_path Bases: MereApp Convenience subclass exposing configuration helpers. Source code in src/mere/application.py 748 749 750 751 752 753 754 755 class Mere ( MereApp ): \"\"\"Convenience subclass exposing configuration helpers.\"\"\" @classmethod def from_config ( cls , config : AppConfig | Mapping [ str , Any ]) -> \"Mere\" : if isinstance ( config , AppConfig ): return cls ( config = config ) return cls ( config = msgspec . convert ( config , type = AppConfig )) Bases: Struct Typed configuration for an :class: ~mere.application.MereApp instance. Source code in src/mere/config.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class AppConfig ( Struct , frozen = True ): \"\"\"Typed configuration for an :class:`~mere.application.MereApp` instance.\"\"\" site : str = \"demo\" domain : str = \"example.com\" admin_subdomain : str = \"admin\" marketing_tenant : str = \"public\" allowed_tenants : tuple [ str , ... ] = () max_request_body_bytes : int | None = 1_048_576 websocket_trusted_origins : tuple [ str , ... ] = () execution : ExecutionConfig = ExecutionConfig () database : DatabaseConfig | None = None chatops : ChatOpsConfig = ChatOpsConfig () observability : ObservabilityConfig = ObservabilityConfig () def tenant_host ( self , tenant : str ) -> str : \"\"\"Return the hostname for a given tenant.\"\"\" if tenant == self . marketing_tenant : return f \" { self . site } . { self . domain } \" if tenant == self . admin_subdomain : return f \" { self . admin_subdomain } . { self . site } . { self . domain } \" return f \" { tenant } . { self . site } . { self . domain } \" tenant_host ( tenant ) \u00b6 Return the hostname for a given tenant. Source code in src/mere/config.py 28 29 30 31 32 33 34 35 def tenant_host ( self , tenant : str ) -> str : \"\"\"Return the hostname for a given tenant.\"\"\" if tenant == self . marketing_tenant : return f \" { self . site } . { self . domain } \" if tenant == self . admin_subdomain : return f \" { self . admin_subdomain } . { self . site } . { self . domain } \" return f \" { tenant } . { self . site } . { self . domain } \" Bases: Struct Source code in src/mere/tenancy.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class TenantContext ( Struct , frozen = True ): tenant : str site : str domain : str scope : TenantScope @property def is_admin ( self ) -> bool : return self . scope is TenantScope . ADMIN @property def host ( self ) -> str : if self . scope is TenantScope . PUBLIC : return f \" { self . site } . { self . domain } \" if self . scope is TenantScope . ADMIN : return f \"admin. { self . site } . { self . domain } \" return f \" { self . tenant } . { self . site } . { self . domain } \" def key ( self ) -> str : return f \" { self . scope } : { self . tenant } @ { self . site } . { self . domain } \" Tenant aware database helper that understands Mere model metadata. Source code in src/mere/database.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 class Database : \"\"\"Tenant aware database helper that understands Mere model metadata.\"\"\" def __init__ ( self , config : DatabaseConfig , * , pool : Any | None = None , pool_factory : Callable [[ Mapping [ str , Any ]], Any ] | None = None , secret_resolver : \"SecretResolver | None\" = None , ) -> None : self . config = config self . _pool = pool self . _pool_factory = pool_factory or _default_pool_factory self . _secret_resolver = secret_resolver async def startup ( self ) -> None : \"\"\"Instantiate the underlying :class:`psqlpy.ConnectionPool` if needed.\"\"\" self . _ensure_pool () async def shutdown ( self ) -> None : \"\"\"Dispose the connection pool.\"\"\" if self . _pool is None : return close = getattr ( self . _pool , \"close\" , None ) if close is None : self . _pool = None return result = close () if inspect . isawaitable ( result ): # pragma: no cover - depends on pool implementation await result self . _pool = None @asynccontextmanager async def connection ( self , * , tenant : TenantContext | None = None , schema : str | None = None , role : str | None = None , ) -> AsyncIterator [ DatabaseConnection ]: pool = self . _ensure_pool () async with pool . acquire () as raw_connection : connection = DatabaseConnection ( raw_connection ) await connection . set_search_path ( self . _search_path ( schema , tenant )) await connection . set_role ( role or self . config . default_role ) yield connection @asynccontextmanager async def connection_for_model ( self , model_info : \"ModelInfo[Any]\" , * , tenant : TenantContext | None = None , role : str | None = None , ) -> AsyncIterator [ DatabaseConnection ]: schema = self . schema_for_model ( model_info , tenant ) async with self . connection ( tenant = tenant , schema = schema , role = role ) as connection : yield connection def schema_for_model ( self , model_info : \"ModelInfo[Any]\" , tenant : TenantContext | None ) -> str : if model_info . scope == \"admin\" : return model_info . schema or self . config . admin_schema if tenant is None : raise DatabaseError ( \"tenant context required for tenant scoped model access\" ) base = model_info . schema or self . config . schema_for_tenant ( tenant ) return base . format ( tenant = tenant . tenant ) def _ensure_pool ( self ) -> Any : if self . _pool is not None : return self . _pool if self . _pool_factory is None : raise DatabaseError ( \"No pool factory configured\" ) options = _pool_kwargs ( self . config . pool , resolver = self . _secret_resolver ) self . _pool = self . _pool_factory ( options ) return self . _pool def _search_path ( self , schema : str | None , tenant : TenantContext | None ) -> tuple [ str , ... ]: path : list [ str ] = [] if schema is not None : path . append ( schema ) elif tenant is not None : path . append ( self . config . schema_for_tenant ( tenant )) else : path . append ( self . config . admin_schema ) for entry in self . config . search_path : if entry not in path : path . append ( entry ) return tuple ( path ) shutdown () async \u00b6 Dispose the connection pool. Source code in src/mere/database.py 251 252 253 254 255 256 257 258 259 260 261 262 263 async def shutdown ( self ) -> None : \"\"\"Dispose the connection pool.\"\"\" if self . _pool is None : return close = getattr ( self . _pool , \"close\" , None ) if close is None : self . _pool = None return result = close () if inspect . isawaitable ( result ): # pragma: no cover - depends on pool implementation await result self . _pool = None startup () async \u00b6 Instantiate the underlying :class: psqlpy.ConnectionPool if needed. Source code in src/mere/database.py 246 247 248 249 async def startup ( self ) -> None : \"\"\"Instantiate the underlying :class:`psqlpy.ConnectionPool` if needed.\"\"\" self . _ensure_pool () Runtime object responsible for executing SQL for models. Source code in src/mere/orm.pyclass ORM : \"\"\"Runtime object responsible for executing SQL for models.\"\"\" def __init__ ( self , database : Database , registry : ModelRegistry | None = None , * , audit_trail : AuditTrail | None = None , ) -> None : self . database = database self . registry = registry or _default_registry self . _audit_trail = audit_trail self . admin = _Namespace ( self , ModelScope . ADMIN . value ) self . tenants = _Namespace ( self , ModelScope . TENANT . value ) def attach_audit_trail ( self , audit_trail : AuditTrail ) -> None : \"\"\"Attach an :class:`~mere.audit.AuditTrail` after initialization.\"\"\" self . _audit_trail = audit_trail async def insert ( self , model : type [ M ], data : M | Mapping [ str , Any ], * , tenant : TenantContext | None = None ) -> M : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) instance = self . _coerce_instance ( info , data ) return await self . _insert ( info , instance , tenant ) async def select ( self , model : type [ M ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , order_by : Sequence [ str ] | None = None , limit : int | None = None , ) -> list [ M ]: info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) rows = await self . _select ( info , tenant = tenant , filters = filters , order_by = order_by , limit = limit ) return [ msgspec . convert ( row , type = info . model ) for row in rows ] async def update ( self , model : type [ M ], values : Mapping [ str , Any ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , ) -> list [ M ]: info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) rows = await self . _update ( info , values , tenant = tenant , filters = filters ) return [ msgspec . convert ( row , type = info . model ) for row in rows ] async def delete ( self , model : type [ M ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , ) -> int : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) return await self . _delete ( info , tenant = tenant , filters = filters ) def manager ( self , model : type [ M ]) -> \"ModelManager[M]\" : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) return ModelManager ( self , info ) def _ensure_exposed ( self , info : ModelInfo [ Any ]) -> None : if not info . exposed : raise PermissionError ( f \"Model { info . model . __name__ } is restricted and cannot be accessed via the ORM\" ) async def _insert ( self , info : ModelInfo [ M ], instance : M , tenant : TenantContext | None ) -> M : payload = msgspec . to_builtins ( instance ) _apply_insert_metadata ( info , payload ) columns : list [ str ] = [] values : list [ Any ] = [] for field in info . fields : if field . name not in payload : continue columns . append ( _quote_identifier ( field . column )) values . append ( payload [ field . name ]) placeholders = \", \" . join ( f \"$ { idx } \" for idx in range ( 1 , len ( values ) + 1 )) returning = self . _projection ( info ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"INSERT INTO { table } ( { ', ' . join ( columns ) } ) VALUES ( { placeholders } ) RETURNING { returning } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , values ) if not rows : raise RuntimeError ( \"Insert did not return any rows\" ) # pragma: no cover - safety net if self . _audit_trail is not None : await self . _audit_trail . record_model_change ( info = info , action = INSERT , tenant = tenant , data = rows [ 0 ], changes = payload , ) return msgspec . convert ( rows [ 0 ], type = info . model ) async def _select ( self , info : ModelInfo [ M ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , order_by : Sequence [ str ] | None , limit : int | None , ) -> list [ dict [ str , Any ]]: where_clause , parameters = self . _build_filters ( info , filters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"SELECT { self . _projection ( info ) } FROM { table } \" if where_clause : sql += f \" WHERE { where_clause } \" if order_by : sql += f \" ORDER BY { ', ' . join ( self . _order_fragment ( info , part ) for part in order_by ) } \" if limit is not None : parameters . append ( limit ) sql += f \" LIMIT $ { len ( parameters ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : return await connection . fetch_all ( sql , parameters ) async def _update ( self , info : ModelInfo [ M ], values : Mapping [ str , Any ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , ) -> list [ dict [ str , Any ]]: if not values : return await self . _select ( info , tenant = tenant , filters = filters , order_by = None , limit = None ) update_values = dict ( values ) _apply_update_metadata ( info , update_values ) set_clause , parameters = self . _build_set ( info , update_values ) where_clause , where_parameters = self . _build_filters ( info , filters , start = len ( parameters ) + 1 ) parameters . extend ( where_parameters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"UPDATE { table } SET { set_clause } \" if where_clause : sql += f \" WHERE { where_clause } \" sql += f \" RETURNING { self . _projection ( info ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , parameters ) if self . _audit_trail is not None : for row in rows : await self . _audit_trail . record_model_change ( info = info , action = UPDATE , tenant = tenant , data = row , changes = update_values , ) return rows async def _delete ( self , info : ModelInfo [ M ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , ) -> int : where_clause , parameters = self . _build_filters ( info , filters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"DELETE FROM { table } \" if where_clause : sql += f \" WHERE { where_clause } \" sql += f \" RETURNING { self . _projection ( info ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , parameters ) if self . _audit_trail is not None : for row in rows : await self . _audit_trail . record_model_change ( info = info , action = DELETE , tenant = tenant , data = row , changes = {}, ) return len ( rows ) def _coerce_instance ( self , info : ModelInfo [ M ], data : M | Mapping [ str , Any ]) -> M : if isinstance ( data , info . model ): return data return msgspec . convert ( data , type = info . model ) def _projection ( self , info : ModelInfo [ Any ]) -> str : parts : list [ str ] = [] for field in info . fields : column = _quote_identifier ( field . column ) if field . column != field . name : alias = _quote_identifier ( field . name ) parts . append ( f \" { column } AS { alias } \" ) else : parts . append ( column ) return \", \" . join ( parts ) def _order_fragment ( self , info : ModelInfo [ Any ], expression : str ) -> str : direction = \"ASC\" field_name = expression if expression . lower () . endswith ( \" desc\" ): direction = \"DESC\" field_name = expression [: - len ( \" desc\" )] elif expression . lower () . endswith ( \" asc\" ): field_name = expression [: - len ( \" asc\" )] field = self . _resolve_field ( info , field_name . strip ()) return f \" { _quote_identifier ( field . column ) } { direction } \" def _build_filters ( self , info : ModelInfo [ Any ], filters : Mapping [ str , Any ] | None , * , start : int = 1 , ) -> tuple [ str , list [ Any ]]: if not filters : return \"\" , [] parts : list [ str ] = [] parameters : list [ Any ] = [] index = start for name , value in filters . items (): field = self . _resolve_field ( info , name ) parts . append ( f \" { _quote_identifier ( field . column ) } = $ { index } \" ) parameters . append ( value ) index += 1 return \" AND \" . join ( parts ), parameters def _build_set ( self , info : ModelInfo [ Any ], values : Mapping [ str , Any ], ) -> tuple [ str , list [ Any ]]: parts : list [ str ] = [] parameters : list [ Any ] = [] for idx , ( name , value ) in enumerate ( values . items (), start = 1 ): field = self . _resolve_field ( info , name ) parts . append ( f \" { _quote_identifier ( field . column ) } = $ { idx } \" ) parameters . append ( value ) return \", \" . join ( parts ), parameters def _resolve_field ( self , info : ModelInfo [ Any ], name : str ) -> FieldInfo : try : return info . field_map [ name ] except KeyError as exc : raise LookupError ( f \"Unknown field ' { name } ' for model { info . model . __name__ } \" ) from exc attach_audit_trail ( audit_trail ) \u00b6 Attach an :class: ~mere.audit.AuditTrail after initialization. Source code in src/mere/orm.py 198 199 200 201 def attach_audit_trail ( self , audit_trail : AuditTrail ) -> None : \"\"\"Attach an :class:`~mere.audit.AuditTrail` after initialization.\"\"\" self . _audit_trail = audit_trail","title":"API reference"},{"location":"reference/api/#mere.application.MereApp.chatops_command","text":"Register a ChatOps command handler bound to command . Source code in src/mere/application.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 def chatops_command ( self , command : ChatOpsSlashCommand , * , name : str | None = None , ) -> Callable [[ Callable [ ... , Awaitable [ Any ] | Any ]], Callable [ ... , Awaitable [ Any ] | Any ]]: \"\"\"Register a ChatOps command handler bound to ``command``.\"\"\" def decorator ( func : Callable [ ... , Awaitable [ Any ] | Any ]) -> Callable [ ... , Awaitable [ Any ] | Any ]: binding = ChatOpsCommandBinding ( command = command , handler = func , name = name or command . name , ) self . chatops_commands . register ( binding ) return func return decorator","title":"chatops_command"},{"location":"reference/api/#mere.application.MereApp.mount_static","text":"Serve files rooted at directory under path . Source code in src/mere/application.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def mount_static ( self , path : str , * , directory : str | os . PathLike [ str ], name : str | None = None , index_file : str | None = \"index.html\" , cache_control : str | None = \"public, max-age=3600\" , follow_symlinks : bool = False , content_types : Mapping [ str , str ] | None = None , ) -> None : \"\"\"Serve files rooted at ``directory`` under ``path``.\"\"\" normalized = path . strip () if not normalized : raise ValueError ( \"Static mount path cannot be empty\" ) if not normalized . startswith ( \"/\" ): normalized = \"/\" + normalized stripped = normalized . strip ( \"/\" ) if not stripped : raise ValueError ( \"Static mount path cannot be '/' or whitespace only\" ) mount_path = \"/\" + stripped server = StaticFiles ( directory = directory , executor = self . executor , index_file = index_file , follow_symlinks = follow_symlinks , cache_control = cache_control , content_types = content_types , ) async def _serve_root ( request : Request ) -> Response : return await server . serve ( \"\" , method = request . method , headers = request . headers ) async def _serve_path ( filepath : str , request : Request ) -> Response : return await server . serve ( filepath , method = request . method , headers = request . headers ) self . router . add_route ( mount_path , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_root , name = name ) self . router . add_route ( f \" { mount_path } / {{ filepath:path }} \" , methods = ( \"GET\" , \"HEAD\" ), endpoint = _serve_path ) if name is not None : self . _named_routes [ name ] = mount_path Bases: MereApp Convenience subclass exposing configuration helpers. Source code in src/mere/application.py 748 749 750 751 752 753 754 755 class Mere ( MereApp ): \"\"\"Convenience subclass exposing configuration helpers.\"\"\" @classmethod def from_config ( cls , config : AppConfig | Mapping [ str , Any ]) -> \"Mere\" : if isinstance ( config , AppConfig ): return cls ( config = config ) return cls ( config = msgspec . convert ( config , type = AppConfig )) Bases: Struct Typed configuration for an :class: ~mere.application.MereApp instance. Source code in src/mere/config.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class AppConfig ( Struct , frozen = True ): \"\"\"Typed configuration for an :class:`~mere.application.MereApp` instance.\"\"\" site : str = \"demo\" domain : str = \"example.com\" admin_subdomain : str = \"admin\" marketing_tenant : str = \"public\" allowed_tenants : tuple [ str , ... ] = () max_request_body_bytes : int | None = 1_048_576 websocket_trusted_origins : tuple [ str , ... ] = () execution : ExecutionConfig = ExecutionConfig () database : DatabaseConfig | None = None chatops : ChatOpsConfig = ChatOpsConfig () observability : ObservabilityConfig = ObservabilityConfig () def tenant_host ( self , tenant : str ) -> str : \"\"\"Return the hostname for a given tenant.\"\"\" if tenant == self . marketing_tenant : return f \" { self . site } . { self . domain } \" if tenant == self . admin_subdomain : return f \" { self . admin_subdomain } . { self . site } . { self . domain } \" return f \" { tenant } . { self . site } . { self . domain } \"","title":"mount_static"},{"location":"reference/api/#mere.config.AppConfig.tenant_host","text":"Return the hostname for a given tenant. Source code in src/mere/config.py 28 29 30 31 32 33 34 35 def tenant_host ( self , tenant : str ) -> str : \"\"\"Return the hostname for a given tenant.\"\"\" if tenant == self . marketing_tenant : return f \" { self . site } . { self . domain } \" if tenant == self . admin_subdomain : return f \" { self . admin_subdomain } . { self . site } . { self . domain } \" return f \" { tenant } . { self . site } . { self . domain } \" Bases: Struct Source code in src/mere/tenancy.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class TenantContext ( Struct , frozen = True ): tenant : str site : str domain : str scope : TenantScope @property def is_admin ( self ) -> bool : return self . scope is TenantScope . ADMIN @property def host ( self ) -> str : if self . scope is TenantScope . PUBLIC : return f \" { self . site } . { self . domain } \" if self . scope is TenantScope . ADMIN : return f \"admin. { self . site } . { self . domain } \" return f \" { self . tenant } . { self . site } . { self . domain } \" def key ( self ) -> str : return f \" { self . scope } : { self . tenant } @ { self . site } . { self . domain } \" Tenant aware database helper that understands Mere model metadata. Source code in src/mere/database.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 class Database : \"\"\"Tenant aware database helper that understands Mere model metadata.\"\"\" def __init__ ( self , config : DatabaseConfig , * , pool : Any | None = None , pool_factory : Callable [[ Mapping [ str , Any ]], Any ] | None = None , secret_resolver : \"SecretResolver | None\" = None , ) -> None : self . config = config self . _pool = pool self . _pool_factory = pool_factory or _default_pool_factory self . _secret_resolver = secret_resolver async def startup ( self ) -> None : \"\"\"Instantiate the underlying :class:`psqlpy.ConnectionPool` if needed.\"\"\" self . _ensure_pool () async def shutdown ( self ) -> None : \"\"\"Dispose the connection pool.\"\"\" if self . _pool is None : return close = getattr ( self . _pool , \"close\" , None ) if close is None : self . _pool = None return result = close () if inspect . isawaitable ( result ): # pragma: no cover - depends on pool implementation await result self . _pool = None @asynccontextmanager async def connection ( self , * , tenant : TenantContext | None = None , schema : str | None = None , role : str | None = None , ) -> AsyncIterator [ DatabaseConnection ]: pool = self . _ensure_pool () async with pool . acquire () as raw_connection : connection = DatabaseConnection ( raw_connection ) await connection . set_search_path ( self . _search_path ( schema , tenant )) await connection . set_role ( role or self . config . default_role ) yield connection @asynccontextmanager async def connection_for_model ( self , model_info : \"ModelInfo[Any]\" , * , tenant : TenantContext | None = None , role : str | None = None , ) -> AsyncIterator [ DatabaseConnection ]: schema = self . schema_for_model ( model_info , tenant ) async with self . connection ( tenant = tenant , schema = schema , role = role ) as connection : yield connection def schema_for_model ( self , model_info : \"ModelInfo[Any]\" , tenant : TenantContext | None ) -> str : if model_info . scope == \"admin\" : return model_info . schema or self . config . admin_schema if tenant is None : raise DatabaseError ( \"tenant context required for tenant scoped model access\" ) base = model_info . schema or self . config . schema_for_tenant ( tenant ) return base . format ( tenant = tenant . tenant ) def _ensure_pool ( self ) -> Any : if self . _pool is not None : return self . _pool if self . _pool_factory is None : raise DatabaseError ( \"No pool factory configured\" ) options = _pool_kwargs ( self . config . pool , resolver = self . _secret_resolver ) self . _pool = self . _pool_factory ( options ) return self . _pool def _search_path ( self , schema : str | None , tenant : TenantContext | None ) -> tuple [ str , ... ]: path : list [ str ] = [] if schema is not None : path . append ( schema ) elif tenant is not None : path . append ( self . config . schema_for_tenant ( tenant )) else : path . append ( self . config . admin_schema ) for entry in self . config . search_path : if entry not in path : path . append ( entry ) return tuple ( path )","title":"tenant_host"},{"location":"reference/api/#mere.database.Database.shutdown","text":"Dispose the connection pool. Source code in src/mere/database.py 251 252 253 254 255 256 257 258 259 260 261 262 263 async def shutdown ( self ) -> None : \"\"\"Dispose the connection pool.\"\"\" if self . _pool is None : return close = getattr ( self . _pool , \"close\" , None ) if close is None : self . _pool = None return result = close () if inspect . isawaitable ( result ): # pragma: no cover - depends on pool implementation await result self . _pool = None","title":"shutdown"},{"location":"reference/api/#mere.database.Database.startup","text":"Instantiate the underlying :class: psqlpy.ConnectionPool if needed. Source code in src/mere/database.py 246 247 248 249 async def startup ( self ) -> None : \"\"\"Instantiate the underlying :class:`psqlpy.ConnectionPool` if needed.\"\"\" self . _ensure_pool () Runtime object responsible for executing SQL for models. Source code in src/mere/orm.pyclass ORM : \"\"\"Runtime object responsible for executing SQL for models.\"\"\" def __init__ ( self , database : Database , registry : ModelRegistry | None = None , * , audit_trail : AuditTrail | None = None , ) -> None : self . database = database self . registry = registry or _default_registry self . _audit_trail = audit_trail self . admin = _Namespace ( self , ModelScope . ADMIN . value ) self . tenants = _Namespace ( self , ModelScope . TENANT . value ) def attach_audit_trail ( self , audit_trail : AuditTrail ) -> None : \"\"\"Attach an :class:`~mere.audit.AuditTrail` after initialization.\"\"\" self . _audit_trail = audit_trail async def insert ( self , model : type [ M ], data : M | Mapping [ str , Any ], * , tenant : TenantContext | None = None ) -> M : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) instance = self . _coerce_instance ( info , data ) return await self . _insert ( info , instance , tenant ) async def select ( self , model : type [ M ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , order_by : Sequence [ str ] | None = None , limit : int | None = None , ) -> list [ M ]: info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) rows = await self . _select ( info , tenant = tenant , filters = filters , order_by = order_by , limit = limit ) return [ msgspec . convert ( row , type = info . model ) for row in rows ] async def update ( self , model : type [ M ], values : Mapping [ str , Any ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , ) -> list [ M ]: info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) rows = await self . _update ( info , values , tenant = tenant , filters = filters ) return [ msgspec . convert ( row , type = info . model ) for row in rows ] async def delete ( self , model : type [ M ], * , tenant : TenantContext | None = None , filters : Mapping [ str , Any ] | None = None , ) -> int : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) return await self . _delete ( info , tenant = tenant , filters = filters ) def manager ( self , model : type [ M ]) -> \"ModelManager[M]\" : info = self . registry . info_for ( model ) self . _ensure_exposed ( info ) return ModelManager ( self , info ) def _ensure_exposed ( self , info : ModelInfo [ Any ]) -> None : if not info . exposed : raise PermissionError ( f \"Model { info . model . __name__ } is restricted and cannot be accessed via the ORM\" ) async def _insert ( self , info : ModelInfo [ M ], instance : M , tenant : TenantContext | None ) -> M : payload = msgspec . to_builtins ( instance ) _apply_insert_metadata ( info , payload ) columns : list [ str ] = [] values : list [ Any ] = [] for field in info . fields : if field . name not in payload : continue columns . append ( _quote_identifier ( field . column )) values . append ( payload [ field . name ]) placeholders = \", \" . join ( f \"$ { idx } \" for idx in range ( 1 , len ( values ) + 1 )) returning = self . _projection ( info ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"INSERT INTO { table } ( { ', ' . join ( columns ) } ) VALUES ( { placeholders } ) RETURNING { returning } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , values ) if not rows : raise RuntimeError ( \"Insert did not return any rows\" ) # pragma: no cover - safety net if self . _audit_trail is not None : await self . _audit_trail . record_model_change ( info = info , action = INSERT , tenant = tenant , data = rows [ 0 ], changes = payload , ) return msgspec . convert ( rows [ 0 ], type = info . model ) async def _select ( self , info : ModelInfo [ M ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , order_by : Sequence [ str ] | None , limit : int | None , ) -> list [ dict [ str , Any ]]: where_clause , parameters = self . _build_filters ( info , filters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"SELECT { self . _projection ( info ) } FROM { table } \" if where_clause : sql += f \" WHERE { where_clause } \" if order_by : sql += f \" ORDER BY { ', ' . join ( self . _order_fragment ( info , part ) for part in order_by ) } \" if limit is not None : parameters . append ( limit ) sql += f \" LIMIT $ { len ( parameters ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : return await connection . fetch_all ( sql , parameters ) async def _update ( self , info : ModelInfo [ M ], values : Mapping [ str , Any ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , ) -> list [ dict [ str , Any ]]: if not values : return await self . _select ( info , tenant = tenant , filters = filters , order_by = None , limit = None ) update_values = dict ( values ) _apply_update_metadata ( info , update_values ) set_clause , parameters = self . _build_set ( info , update_values ) where_clause , where_parameters = self . _build_filters ( info , filters , start = len ( parameters ) + 1 ) parameters . extend ( where_parameters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"UPDATE { table } SET { set_clause } \" if where_clause : sql += f \" WHERE { where_clause } \" sql += f \" RETURNING { self . _projection ( info ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , parameters ) if self . _audit_trail is not None : for row in rows : await self . _audit_trail . record_model_change ( info = info , action = UPDATE , tenant = tenant , data = row , changes = update_values , ) return rows async def _delete ( self , info : ModelInfo [ M ], * , tenant : TenantContext | None , filters : Mapping [ str , Any ] | None , ) -> int : where_clause , parameters = self . _build_filters ( info , filters ) schema = self . database . schema_for_model ( info , tenant ) table = f \" { _quote_identifier ( schema ) } . { _quote_identifier ( info . table ) } \" sql = f \"DELETE FROM { table } \" if where_clause : sql += f \" WHERE { where_clause } \" sql += f \" RETURNING { self . _projection ( info ) } \" async with self . database . connection_for_model ( info , tenant = tenant ) as connection : rows = await connection . fetch_all ( sql , parameters ) if self . _audit_trail is not None : for row in rows : await self . _audit_trail . record_model_change ( info = info , action = DELETE , tenant = tenant , data = row , changes = {}, ) return len ( rows ) def _coerce_instance ( self , info : ModelInfo [ M ], data : M | Mapping [ str , Any ]) -> M : if isinstance ( data , info . model ): return data return msgspec . convert ( data , type = info . model ) def _projection ( self , info : ModelInfo [ Any ]) -> str : parts : list [ str ] = [] for field in info . fields : column = _quote_identifier ( field . column ) if field . column != field . name : alias = _quote_identifier ( field . name ) parts . append ( f \" { column } AS { alias } \" ) else : parts . append ( column ) return \", \" . join ( parts ) def _order_fragment ( self , info : ModelInfo [ Any ], expression : str ) -> str : direction = \"ASC\" field_name = expression if expression . lower () . endswith ( \" desc\" ): direction = \"DESC\" field_name = expression [: - len ( \" desc\" )] elif expression . lower () . endswith ( \" asc\" ): field_name = expression [: - len ( \" asc\" )] field = self . _resolve_field ( info , field_name . strip ()) return f \" { _quote_identifier ( field . column ) } { direction } \" def _build_filters ( self , info : ModelInfo [ Any ], filters : Mapping [ str , Any ] | None , * , start : int = 1 , ) -> tuple [ str , list [ Any ]]: if not filters : return \"\" , [] parts : list [ str ] = [] parameters : list [ Any ] = [] index = start for name , value in filters . items (): field = self . _resolve_field ( info , name ) parts . append ( f \" { _quote_identifier ( field . column ) } = $ { index } \" ) parameters . append ( value ) index += 1 return \" AND \" . join ( parts ), parameters def _build_set ( self , info : ModelInfo [ Any ], values : Mapping [ str , Any ], ) -> tuple [ str , list [ Any ]]: parts : list [ str ] = [] parameters : list [ Any ] = [] for idx , ( name , value ) in enumerate ( values . items (), start = 1 ): field = self . _resolve_field ( info , name ) parts . append ( f \" { _quote_identifier ( field . column ) } = $ { idx } \" ) parameters . append ( value ) return \", \" . join ( parts ), parameters def _resolve_field ( self , info : ModelInfo [ Any ], name : str ) -> FieldInfo : try : return info . field_map [ name ] except KeyError as exc : raise LookupError ( f \"Unknown field ' { name } ' for model { info . model . __name__ } \" ) from exc","title":"startup"},{"location":"reference/api/#mere.orm.ORM.attach_audit_trail","text":"Attach an :class: ~mere.audit.AuditTrail after initialization. Source code in src/mere/orm.py 198 199 200 201 def attach_audit_trail ( self , audit_trail : AuditTrail ) -> None : \"\"\"Attach an :class:`~mere.audit.AuditTrail` after initialization.\"\"\" self . _audit_trail = audit_trail","title":"attach_audit_trail"},{"location":"reference/cli/","text":"Mere bundles a CLI entry point exposed as uv run mere . It provides utilities for migrations, quality checks, and data snapshots. Available commands \u00b6 Command Description mere Runs the quality gate sequence ( ruff check , ty check , pytest ). mere migrate Applies database migrations. Supports --scope and --tenant selectors. mere make-migration NAME Generates a migration template populated with admin and tenant models. mere snapshot-test-data Writes a canonical SQL snapshot of test fixtures. Custom environments \u00b6 The CLI loads a CLIEnvironment from a module using the --module option. Implement get_database , get_migrations , and get_tenants helpers in that module to provide runtime components. The module can also expose a DATABASE attribute for simple use cases.","title":"CLI"},{"location":"reference/cli/#available-commands","text":"Command Description mere Runs the quality gate sequence ( ruff check , ty check , pytest ). mere migrate Applies database migrations. Supports --scope and --tenant selectors. mere make-migration NAME Generates a migration template populated with admin and tenant models. mere snapshot-test-data Writes a canonical SQL snapshot of test fixtures.","title":"Available commands"},{"location":"reference/cli/#custom-environments","text":"The CLI loads a CLIEnvironment from a module using the --module option. Implement get_database , get_migrations , and get_tenants helpers in that module to provide runtime components. The module can also expose a DATABASE attribute for simple use cases.","title":"Custom environments"},{"location":"reference/http/","text":"Mere exposes a comprehensive HTTP toolkit that mirrors the ASGI specification while adding high-level helpers for responses and WebSockets. Status helpers \u00b6 mere.http includes predicates such as is_success , is_client_error , and ensure_status which make it simple to enforce consistent status handling in handlers and middleware. Response types \u00b6 Use JSONResponse and PlainTextResponse for structured output. Both apply DEFAULT_SECURITY_HEADERS so responses include strict transport security, frame protection, and content type metadata by default. WebSockets \u00b6 mere.websockets.WebSocket wraps the ASGI scope with typed send/receive helpers and integrates with the same dependency injection system used for HTTP handlers. The _status_to_websocket_close helper maps HTTP statuses to the appropriate WebSocket close codes, ensuring graceful shutdown of tenant connections.","title":"HTTP utilities"},{"location":"reference/http/#status-helpers","text":"mere.http includes predicates such as is_success , is_client_error , and ensure_status which make it simple to enforce consistent status handling in handlers and middleware.","title":"Status helpers"},{"location":"reference/http/#response-types","text":"Use JSONResponse and PlainTextResponse for structured output. Both apply DEFAULT_SECURITY_HEADERS so responses include strict transport security, frame protection, and content type metadata by default.","title":"Response types"},{"location":"reference/http/#websockets","text":"mere.websockets.WebSocket wraps the ASGI scope with typed send/receive helpers and integrates with the same dependency injection system used for HTTP handlers. The _status_to_websocket_close helper maps HTTP statuses to the appropriate WebSocket close codes, ensuring graceful shutdown of tenant connections.","title":"WebSockets"}]}